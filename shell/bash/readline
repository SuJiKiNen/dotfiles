#!/usr/bin/env bash
# stolen from https://github.com/shanesmith/dotfiles/blob/master/bash_readline

# insert something before cursor
__readline_insert() {
    READLINE_LINE="${READLINE_LINE:0:$READLINE_POINT}$1${READLINE_LINE:$READLINE_POINT}"
    READLINE_POINT=$(( READLINE_POINT + ${#1} ))
}

__readline_replace() {
    READLINE_LINE="$1"
    READLINE_POINT="${#1}"
}

__escape() {
    while read -r item; do
        printf '%q ' "$item"
    done
}

_fzf_git_log() {
    local sha
    sha="$(git log --color --oneline | fzf --ansi --no-sort | awk '{print $1}' | __escape)"
    __readline_insert "$sha"
}

_fzf_git_reflog() {
    local sha
    sha="$(git reflog --color | fzf --ansi --no-sort | awk '{print $1}' | __escape)"
    __readline_insert "$sha"
}

_fzf_git_status() {
    local file
    file="$(git status --short | fzf -m | awk '{print $2}' | __escape)"
    __readline_insert "$file"
}

_fzf_pipenv_env() {
    local env_name
    env_name="$(pipenv --envs |
    awk 'match($0, /PIPENV.*$/) {print substr($0, RSTART, RLENGTH)}'|
    fzf -m)"
    __readline_insert "$env_name"
}

_fzf_docker_ps() {
    local container_id

    container_id="$(docker ps --format 'table {{ .ID}}\t{{ .Names}}\t{{ .RunningFor}}\t{{ .Image}}' |
    column -t -s $'\t' |
    fzf --header-lines 1 --ansi --no-sort -m |
    awk '{print $2}' |
    __escape)"

    __readline_insert "$container_id"
}


_fzf_docker_ps_a() {
    local container_id

    container_id="$(docker ps -a --format 'table {{ .ID}}\t{{ .Names}}\t{{ .RunningFor}}\t{{ .Image}}' |
    column -t -s $'\t' |
    fzf --header-lines 1 --ansi --no-sort -m |
    awk '{print $2}' |
     __escape)"

    __readline_insert "$container_id"
}

_fzf_docker_images() {
    local image_id

    image_id="$(docker images --format 'table {{ .Repository}}\t{{ .Tag}}\t{{ .ID}}\t{{ .CreatedSince}}' |
    column -t -s $'\t' |
    fzf --header-lines 1 --ansi --no-sort -m |
    awk '{print $3}' |
    __escape)"
    __readline_insert "$image_id"
}

_fzf_network_interfaces_name() {
    local interface_name_and_ip
    interface_name_and_ip="$(ip -oneline addr show | awk '{split($4, ip, "/"); print $2,ip[1]}' |
    column -t -s $' ' |
    fzf --ansi --no-sort -m |
    awk '{print $1}' |
    __escape)"
    __readline_insert "$interface_name_and_ip"
}

_fzf_network_interfaces_ip() {
    local interface_name_and_ip
    interface_name_and_ip="$(ip -oneline addr show | awk '{split($4, ip, "/"); print $2,ip[1]}' |
    column -t -s $' ' |
    fzf --ansi --no-sort -m |
    awk '{print $2}' |
    __escape)"
    __readline_insert "$interface_name_and_ip"
}

fzf-command() {
    local cmds
    IFS='' read -r -d '' cmds <<"EOF"
git_log
git_reflog
git_status
pipenv_env
docker_ps
docker_ps_a
docker_images
network_interfaces_ip
network_interfaces_name
EOF
    local cmd
    cmd=$(echo "$cmds" | fzf +m)
    if [ -z "$cmd" ]; then
        return 0
    fi
    eval _fzf_"${cmd}"
}


if [ -n "$BASH_VERSION" ]; then
    if command -v fzf >/dev/null 2>&1; then
        bind -x '"x": fzf-command'
    fi
fi

# Local Variables:
# mode: shell-script
# End:
