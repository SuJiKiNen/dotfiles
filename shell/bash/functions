#!/usr/bin/env bash
# extended cd funtionality
function cd {
    local CWD GIT_ROOT PARENT_GIT_ROOT
    if [ -z "$1" ] && command -v git >/dev/null 2>&1; then
        CWD="$(pwd)"
        if [ "$OSTYPE" = "msys" ]; then
            CWD="$(pwd -W)"
        fi
        GIT_ROOT="$(git rev-parse --show-toplevel 2>/dev/null)"
        if [ -e "${GIT_ROOT}" ]; then
            if [ "${GIT_ROOT}" != "${CWD}" ]; then
                builtin cd "${GIT_ROOT}" && return # toplevel of git repository
            fi
            PARENT_GIT_ROOT="$(builtin cd .. || exit; git rev-parse --show-toplevel 2>/dev/null)"
            if [ -e "${PARENT_GIT_ROOT}" ]; then
                builtin cd "${PARENT_GIT_ROOT}" && return # toplevel of parent git repository
            fi
        fi
    elif [ -f "$1" ]; then # is it a file?
        builtin cd "$(dirname "$1")" && return # cd into enclosing directory
    fi
    builtin cd "$@" && return # normal cd behaviour
}

function server {
    # port 8000 if no port is given. if the 'o' flag is passed, also
    # open the server in a browser.
    local COMMAND=$1;
    if [ "$COMMAND" = "-o" ]; then
        local PORT=${2:-8000}
        open "http://localhost:${PORT}/"
    else
        PORT=${1:-8000}
    fi

    local PY=python
    if command -v ipython >/dev/null 2>&1; then
        PY=ipython
    fi

    ${PY} -c "
import os
try:
    import http.server as httpserver  # py3
    import socketserver
except ImportError:
    import SimpleHTTPServer as httpserver
    import SocketServer as socketserver

Handler = httpserver.SimpleHTTPRequestHandler
m = Handler.extensions_map
m[''] = 'text/plain'
for k in m.keys():
    m[k] = m[k] + '; charset=UTF-8'
httpd = socketserver.TCPServer(('', int('${PORT}')), Handler)
pid = os.getpid()
print('Serving HTTP[pid: {}] on 0.0.0.0 port ${PORT} ...'.format(pid))
try:
    httpd.serve_forever()
except KeyboardInterrupt:
    print('\nInterrupt received, stopping...')
finally:
    httpd.socket.close()
"
}

function pipsrc {
    export PIP_DEFAULT_TIMEOUT=120 # sec
    case "$1" in
        aliyun)
            export PIP_TRUSTED_HOST=mirrors.aliyun.com
            export PIP_INDEX_URL=http://mirrors.aliyun.com/pypi/simple/
            echo "using $1 pip source!!";;
        douban)
            export PIP_TRUSTED_HOST=pypi.doubanio.com
            export PIP_INDEX_URL=https://pypi.doubanio.com/simple/
            echo "using $1 pip source!!";;
        edu)
            export PIP_TRUSTED_HOST=pypi.tuna.tsinghua.edu.cn
            export PIP_INDEX_URL=https://pypi.tuna.tsinghua.edu.cn/simple/
            echo "using $1 pip source!!";;
        *)
            echo "unset pip source!!"
            unset PIP_TRUSTED_HOST
            unset PIP_INDEX_URL
            unset PIPENV_PYPI_MIRROR
            unset PIP_DEFAULT_TIMEOUT
    esac

    if [ -n "$PIP_INDEX_URL"  ]; then
        export PIPENV_PYPI_MIRROR=$PIP_INDEX_URL
    fi
}

function hex {
    local input
    input="$1"
    if [[ -f "$input" ]]; then
        echo "Hex value of file: $input"
        od -A n -t x1 "$input"
    else
        echo "Hex value of String: $input"
        echo -n "$input" | od -A n -t x1
    fi
}

function pip {
    # https://stackoverflow.com/questions/25399079/how-to-overwrite-a-bash-command
    command pip --version
    command pip "$@"
}

function extract {
    if [ -f "$1" ] ; then
        case $1 in
            *.tar.bz2)  tar xjf "$1"      ;;
            *.tar.gz)   tar xzf "$1"      ;;
            *.bz2)      bunzip2 "$1"      ;;
            *.rar)      rar x "$1"        ;;
            *.gz)       gunzip "$1"       ;;
            *.tar)      tar xf "$1"       ;;
            *.tbz2)     tar xjf "$1"      ;;
            *.tgz)      tar xzf "$1"      ;;
            *.zip)      unzip "$1"        ;;
            *.Z)        uncompress "$1"   ;;
            *)          echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        printf "%s" "'$1' is not a valid file"
    fi
}

function swap_file {
    local TMPFILE
    TMPFILE=$(mktemp) || return
    mv -v "$1" "$TMPFILE" && mv -v "$2" "$1" && mv -v "$TMPFILE" "$2"
}


function docker-proxy-build {
    printf "you must set proxy env first!\n"
    printf "eg. export http_proxy=http://127.0.0.1:1080\n"
    ROOT_DIR="$(git rev-parse --show-toplevel 2>/dev/null)"
    local http_proxy=""
    local https_proxy=""
    if [ -e "${ROOT_DIR}" ]; then
        :
    else
        ROOT_DIR="$(pwd)"
    fi
    builtin cd "${ROOT_DIR}" && \
    docker build \
        --build-arg https_proxy="$https_proxy" \
        --build-arg http_proxy="$http_proxy" \
        -t="$(basename "$ROOT_DIR")" . ;
}


function docker-copy-image-to-ssh-remote {
    local WITH_PV=
    if command -v pv > /dev/null; then
        WITH_PV=1
    fi

    if ! command -v bzip2 > /dev/null; then
        echo 'bzip2 must be installed' >&2
        return 0
    fi

    if [ "$#" -lt 2 ]; then
        printf "usage: docker-ssh-copy-image <image> <ssh options>\n" >&2
        return 0
    fi

    local IMAGE="$1"
    shift
    local SSH_OPTIONS=( "$@" )
    if [ "${WITH_PV}" ]; then
        docker save "${IMAGE}" | bzip2 | pv | ssh "${SSH_OPTIONS[@]}" 'bunzip2 | docker load'
    else
        docker save "${IMAGE}" | bzip2 | ssh "${SSH_OPTIONS[@]}" 'bunzip2 | docker load'
    fi
}

function docker-copy-image-from-ssh-remote {
    local WITH_PV=
    if command -v pv > /dev/null; then
        WITH_PV=1
    fi

    if ! command -v bzip2 > /dev/null; then
        echo 'bzip2 must be installed' >&2
        return 0
    fi

    if [ "$#" -lt 2 ]; then
        printf "usage: docker-ssh-copy-image <image> <ssh options>\n" >&2
        return 0
    fi

    local IMAGE="$1"
    shift
    local SSH_OPTIONS=( "$@" )
    if [ "${WITH_PV}" ]; then
        ssh "${SSH_OPTIONS[@]}" 'docker save' "$IMAGE" '| bzip2' | pv | bunzip2 | docker load
    else
        ssh "${SSH_OPTIONS[@]}" 'docker save' "$IMAGE" '| bzip2' | bunzip2 | docker load
    fi
}


## Proxy functions
## Modified from https://wiki.archlinux.org/index.php/proxy_settings
function proxy_on {
    export no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com"
    PROXY_CONF=${XDG_CONFIG_HOME:-~/.config}/proxy.config

    if (( $# > 0 )); then
    # Remove colon since dot after 4th group captures the colon
        valid=$(prinf "$@" | sed -n 's/\([0-9]\{1,3\}.\)\{4\}\([0-9]\+\)/&/p')
        if [ "$valid" != "$*" ]; then
            >&2 printf "Invalid address"
            return 1
        fi

        export http_proxy="http://$1"
        export https_proxy=$http_proxy
        export ftp_proxy=$http_proxy
        export rsync_proxy=$http_proxy
        printf "%s" "Proxy environment variable set to ${http_proxy}"
        return 0
    fi
    if [ -f "$PROXY_CONF" ]; then
        DEFAULT_PORT=$(awk -F '[:@]' '{ print $(NF)}' "$PROXY_CONF")
        DEFAULT_HOST=$(awk -F '[:@]' '{ print $(NF-1)}' "$PROXY_CONF")
    fi
    DEFAULT_PORT=${DEFAULT_PORT:-1080}

    read -er -p $'Enter Your Proxy Server Username:\n' username
    if [ -n "$username" ]; then
        read -er -p $'Enter Your Proxy Server Password:\n' password
        local pre="$username:$password@"
    fi

    read -er -p $'Enter Your Proxy Server IP(eg. 192.168.1.110):\n' -i "$DEFAULT_HOST" host
    read -er -p $'Enter Your Proxy Server Port(eg. 1080):\n' -i "$DEFAULT_PORT" port
    host=${host:-$DEFAULT_HOST}
    port=${port:-$DEFAULT_PORT}

    _proxy_addr="http://$pre$host:$port"

    PROXY_ENV="http_proxy ftp_proxy https_proxy all_proxy HTTP_PROXY HTTPS_PROXY FTP_PROXY ALL_PROXY"
    for envar in $PROXY_ENV
    do
        printf "Setting %s to %s\n" "$envar" "$_proxy_addr"
        export "$envar"="$_proxy_addr"
    done
    printf %s "$host:$port" > "$PROXY_CONF"
}

function proxy_off {
    PROXY_ENV="http_proxy ftp_proxy https_proxy all_proxy no_proxy HTTP_PROXY HTTPS_PROXY FTP_PROXY ALL_PROXY NO_PROXY"
    for envar in $PROXY_ENV
    do
        printf "Unsetting %s\n" "$envar"
        unset "$envar"
    done
}

function proxy_status {
    PROXY_ENV="http_proxy ftp_proxy https_proxy all_proxy no_proxy HTTP_PROXY HTTPS_PROXY FTP_PROXY ALL_PROXY NO_PROXY"
    printf "Proxy Status:\n"
    for envar in $PROXY_ENV
    do
        printf "%s\n" "$envar"="${!envar}"
    done
}

function compile-ssh-config {
    local need_update=false

    for f in ~/.ssh/*.config
    do
        if [ "$f" -nt ~/.ssh/config ]; then
            need_update=true
        fi
    done

    if [ "${XDG_CONFIG_HOME}/ssh/config.common" -nt ~/.ssh/config ]; then
        need_update=true
    fi

    if [ $need_update == true ]; then
        echo "Updated ssh config!"
        cat ~/.ssh/local.config "${XDG_CONFIG_HOME}"/ssh/config.common > ~/.ssh/config
    fi
}
