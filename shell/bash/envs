#!/usr/bin/env bash

export HISTCONTROL="ignoredups:ignorespace"


if [[ -n "$BASH_VERSION" ]]; then
    set -o emacs
fi

if command -v emacs >/dev/null 2>&1; then
    EDITOR="$(command -v emacs) -nw -Q"
elif command -v nvim >/dev/null 2>&1; then
    EDITOR="$(command -v nvim)"
elif command -v vim >/dev/null 2>&1; then
    EDITOR="$(command -v vim)"
elif command -v nano >/dev/null 2>&1; then
    EDITOR="$(command -v nano)"
else
    echo "No reasonable text editor is installed on this system! EDITOR will not be explicitly set!"
fi
export EDITOR

# http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html
export XDG_CONFIG_HOME=${XDG_CONFIG_HOME:=${HOME%%/}${HOME:+/}.config}
export XDG_CACHE_HOME=${XDG_CACHE_HOME:=${HOME%%/}${HOME:+/}.cache}
export XDG_DATA_HOME=${XDG_DATA_HOME:=${HOME%%/}${HOME:+/}.local/share}

# Set path for inputrc configuration
export INPUTRC="${XDG_CONFIG_HOME%%/}${XDG_CONFIG_HOME:+/}readline/inputrc"
#---------------|------remove /------|-if not empty add /|----------------|

if [[ "$OSTYPE" == "msys" ]]; then
    HOSTS="C:\Windows\System32\drivers\etc\hosts"
else
    HOSTS="/etc/hosts"
fi
export HOSTS

function _virtualenv_prompt(){
    command -v virtualenv > /dev/null 2>&1 || return
    if [[ -n "$VIRTUAL_ENV" ]]; then
        # Strip out the path and just leave the env name
        printf "%s" "(venv: ${VIRTUAL_ENV##*/})"
        # below is a trick to do newline,couldn't figure out how
        # it works when you printf '\n something else',
        # it also works,except only printf '\n'
        printf "%b" '\n\r'
    fi
}

if [[ -n "$BASH_VERSION" ]]; then
    # disable the default virtualenv prompt change
    export VIRTUAL_ENV_DISABLE_PROMPT=1
    export PS1='$(_virtualenv_prompt)'"$PS1"
fi
